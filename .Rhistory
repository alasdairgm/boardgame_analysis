arrange(bgg_rank)
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
arrange(bgg_rank)
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
arrange(bgg_rank) %>%
ggplot() +
geom_col(aes(x = boardgame, y = bgg_rank), fill = "indianred") +
coord_flip()
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
reorder(bgg_rank) %>%
ggplot() +
geom_col(aes(x = boardgame, y = bgg_rank), fill = "indianred") +
coord_flip()
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
reorder(bgg_rank)
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, bgg_rank), y = bgg_rank), fill = "indianred") +
coord_flip()
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank), fill = "indianred") +
coord_flip()
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank), fill = "indianred") +
coord_flip()
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip()
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
facet_wrap(top_100)
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
facet_wrap(~top_100)
boardgames_combined %>%
summarise(across(.cols = everything(), .funs = ~sum(.x == 0)))
boardgames_combined %>%
summarise(across(.cols = everything(), .funs = ~sum(. == 0)))
boardgames_combined %>%
summarise(across(.cols = everything(), .funs = ~sum(x == 0)))
boardgames_combined %>%
summarise(across(.cols = everything(), .funs = ~sum(.x == 0)))
boardgames_combined %>%
summarise(across(.cols = everything(), .funs = ~sum(is.na(.x))))
boardgames_combined %>%
summarise(across(.cols = everything(), .fns = ~sum(is.na(.x))))
boardgames_combined %>%
summarise(across(.cols = everything(), .fns = ~sum(is.na(.x))))
boardgames_combined %>%
summarise(across(.cols = everything(), .fns = ~sum(.x == 0)))
boardgames_combined %>%
filter(bgg_rank == 0)
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ bgg_rank = 31,
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ 31,
boardgame == "Tokaido Collector's Edition" ~ 703,
.default = boardgame
))
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
(boardgame == "Everdell: The Complete Collection") ~ 31,
boardgame == "Tokaido Collector's Edition" ~ 703,
.default = boardgame
))
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
(boardgame == "Everdell: The Complete Collection") ~ 31L,
boardgame == "Tokaido Collector's Edition" ~ 703L,
.default = boardgame
))
boardgames_combined
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
(boardgame == "Everdell: The Complete Collection") ~ "hi",
boardgame == "Tokaido Collector's Edition" ~ 703L,
.default = boardgame
))
boardgames_combined %>%
filter(boardgame == "Everdell: The Complete Collection")
boardgames_combined
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ "hi",
boardgame == "Tokaido Collector's Edition" ~ 703L,
.default = boardgame
))
starwars
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ "hi",
boardgame == "Tokaido Collector's Edition" ~ 703L,
.default = boardgame
))
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ "hi",
boardgame == "Tokaido Collector's Edition" ~ 703L,
.default = bgg_rank
))
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ 31,
boardgame == "Tokaido Collector's Edition" ~ 703L,
.default = bgg_rank
))
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ 31,
boardgame == "Tokaido Collector's Edition" ~ 703,
.default = bgg_rank
))
boardgames_combined
boardgames_combined %>%
filter(bgg_rank == 0)
write_csv(boardgames_combined, "clean_data/boardgames_clean.csv")
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
facet_wrap(~top_100)
#theme(text = element_text(angle = 45, hjust = 1))
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip()
library(tidyverse)
bg_data <- read_csv("clean_data/boardgames_clean.csv")
bg_data
bg_data %>%
slice_max(my_rating)
bg_data %>%
slice_min(my_rating)
bg_data %>%
slice_max(average_bgg_rating)
bg_data %>%
slice_min(average_bgg_rating)
bg_data %>%
filter(boardgame %in% c("Everdell: The Complete Collection",
"Root", "Sleeping Gods", "Gorilla Marketing",
"Bears Vs Babies")) %>%
mutate(boardgame = if_else(str_detect(boardgame, "Everdell"),
"Everdell", boardgame)) %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 5) +
geom_text(aes(label = boardgame),
nudge_x = -0.6, angle = 45) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal()
bg_data %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 5) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,
linetype = "dashed", colour = "red",
size = 2)
library(corrr)
bg_data %>%
corrr::correlate() %>%
corrr::network_plot(colors = c("red", "green"))
cor(my_rating, average_bgg_rating)
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip()
#theme(text = element_text(angle = 45, hjust = 1))
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(x = "BGG rank",
y = "",
fill = "Top 100?")
bg_data %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
group_by(top_100) %>%
summarise(prop_in_top_100 = nrow())
bg_data %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
group_by(top_100)
summarise(prop_in_top_100 = n() / nrow(bg_data)
bg_data %>%
bg_data %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
group_by(top_100) %>%
summarise(prop_in_top_100 = n() / nrow(bg_data))
bg_data %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
group_by(top_100) %>%
summarise(prop_in_top_100 = n() / nrow(bg_data) * 100)
bg_data %>%
filter(bgg_rank <= 1000) %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(x = "BGG rank",
y = "",
fill = "Top 100?")
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(y = "BGG rank",
x = "",
fill = "Top 100?")
bg_data %>%
filter(bgg_rank <= 1000) %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(y = "BGG rank",
x = "",
fill = "Top 100?")
library(modelr)
library(GGally)
install.packages("GGally")
install.packages("ggfortify")
library(modelr)
library(GGally)
library(ggfortify)
bg_data
boardgames
boardgames_trim <- boardgames %>%
select(objectname, average, avgweight, rank, numowned,
playingtime, maxplayers, minplayers, bggrecagerange) %>%
rename(boardgame = objectname,
average_bgg_rating = average,
average_difficulty = avgweight,
bgg_rank = rank,
num_owned = numowned,
max_players = maxplayers,
min_players = minplayers,
play_time = playingtime,
rec_age_range_from = bggrecagerange) %>%
mutate(boardgame = str_to_title(boardgame)) %>%
arrange(boardgame) %>%
mutate(boardgame = str_remove(boardgame, " [:punct:] .+")) # remove dashes and  anything after as these caused issues
boardgames_trim <- boardgames %>%
select(objectname, average, avgweight, rank, numowned,
playingtime, maxplayers, minplayers, bggrecagerange) %>%
rename(boardgame = objectname,
average_bgg_rating = average,
average_difficulty = avgweight,
bgg_rank = rank,
num_owned = numowned,
max_players = maxplayers,
min_players = minplayers,
play_time = playingtime,
rec_age_range_from = bggrecagerange) %>%
mutate(boardgame = str_to_title(boardgame)) %>%
arrange(boardgame) %>%
mutate(boardgame = str_remove(boardgame, " [:punct:] .+"),
# remove dashes and  anything after as these caused issues
rec_age_range_from = as.numeric(str_remove(rec_age_range_from, "+")))
boardgames_trim <- boardgames %>%
select(objectname, average, avgweight, rank, numowned,
playingtime, maxplayers, minplayers, bggrecagerange) %>%
rename(boardgame = objectname,
average_bgg_rating = average,
average_difficulty = avgweight,
bgg_rank = rank,
num_owned = numowned,
max_players = maxplayers,
min_players = minplayers,
play_time = playingtime,
rec_age_range_from = bggrecagerange) %>%
mutate(boardgame = str_to_title(boardgame)) %>%
arrange(boardgame) %>%
mutate(boardgame = str_remove(boardgame, " [:punct:] .+"),
# remove dashes and  anything after as these caused issues
rec_age_range_from = as.numeric(str_remove(rec_age_range_from, "\\+")))
# remove + from age range and make numeric
boardgames_trim
boardgames_trim <- boardgames %>%
select(objectname, average, avgweight, rank, numowned,
playingtime, maxplayers, minplayers, bggrecagerange) %>%
rename(boardgame = objectname,
average_bgg_rating = average,
average_difficulty = avgweight,
bgg_rank = rank,
num_owned = numowned,
max_players = maxplayers,
min_players = minplayers,
play_time = playingtime,
rec_age_range_from = bggrecagerange) %>%
mutate(boardgame = str_to_title(boardgame)) %>%
arrange(boardgame) %>%
mutate(boardgame = str_remove(boardgame, " [:punct:] .+"),
# remove dashes and  anything after as these caused issues
rec_age_range_from = as.numeric(str_remove(rec_age_range_from, "\\+")))
# remove + from age range and make numeric
boardgames_trim
my_ratings <- my_ratings %>%
janitor::clean_names() %>%
mutate(game = str_to_title(game)) %>%
select(game, price_i_paid, my_rating, year_bought) %>%
arrange(game) %>%
mutate(game = str_remove(game, " [:punct:] .+"),
game = str_remove(game, " $")) %>%  # remove dashes and
# anything after as these caused issues
filter(game != "Total") # remove total row from original spreadsheet
my_ratings
my_game_names <- my_ratings %>%
select(game)
bgg_names <- boardgames_trim %>%
select(boardgame)
# find which names aren't in one but are in the other
#setdiff(sort(bgg_names), sort(my_game_names))
# want to exclude expansions as standalone entries
expansions <- c("Root: The Exiles And Partisans Deck",
"Root: The Riverfolk Expansion",
"Root: The Underworld Expansion"
)
comparison <- boardgames_trim %>%
select(boardgame) %>%
filter(!(boardgame %in% expansions)) %>%
bind_cols(my_game_names) %>%
mutate(same = (boardgame == game)) %>%
filter(!same)
boardgames_combined <- boardgames_trim %>%
filter(!(boardgame %in% expansions)) %>%
full_join(my_ratings, by = c("boardgame" = "game"))
boardgames_combined <- boardgames_combined %>%
mutate(bgg_rank = case_when(
boardgame == "Everdell: The Complete Collection" ~ 31,
boardgame == "Tokaido Collector's Edition" ~ 703,
.default = bgg_rank
))
write_csv(boardgames_combined, "clean_data/boardgames_clean.csv")
library(tidyverse)
bg_data <- read_csv("clean_data/boardgames_clean.csv")
bg_data
bg_data %>%
slice_max(my_rating)
bg_data %>%
slice_min(my_rating)
bg_data %>%
slice_max(average_bgg_rating)
bg_data %>%
slice_min(average_bgg_rating)
bg_data %>%
filter(boardgame %in% c("Everdell: The Complete Collection",
"Root", "Sleeping Gods", "Gorilla Marketing",
"Bears Vs Babies")) %>%
mutate(boardgame = if_else(str_detect(boardgame, "Everdell"),
"Everdell", boardgame)) %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 5) +
geom_text(aes(label = boardgame),
nudge_x = -0.6, angle = 45) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal()
bg_data %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 5) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,
linetype = "dashed", colour = "red",
size = 2)
library(corrr)
bg_data %>%
corrr::correlate() %>%
corrr::network_plot(colors = c("red", "green"))
cor(my_rating, average_bgg_rating)
bg_data %>%
ggpairs()
bg_data %>%
select(-boardgame) %>%
ggpairs()
bg_data %>%
select(-boardgame) %>%
ggpairs(progress = FALSE)
```{r warning=FALSE}
bg_data %>%
select(-boardgame) %>%
ggpairs(progress = FALSE)
bg_data %>%
select(my_rating, -boardgame) %>%
ggpairs(progress = FALSE)
bg_data %>%
select(-boardgame) %>%
ggpairs(progress = FALSE)
bg_model1 <- lm(my_rating ~ average_bgg_rating, data = bg_data)
autoplot(bg_model1)
summary(bg_model1)
bg_data
bg_model3 <- lm(my_rating ~ average_bgg_rating + price_i_paid + average_difficuly , data = bg_data)
bg_model3 <- lm(my_rating ~ average_bgg_rating + price_i_paid + average_difficulty , data = bg_data)
autoplot(bg_model3) # look okay
summary(bg_model3)
bg_model2 <- lm(my_rating ~ average_bgg_rating + price_i_paid , data = bg_data)
autoplot(bg_model2) # look okay
summary(bg_model2)
bg_model2 <- lm(my_rating ~ average_bgg_rating + average_difficulty , data = bg_data)
autoplot(bg_model2) # look okay
summary(bg_model2)
bg_model1 <- lm(my_rating ~ min_players, data = bg_data)
autoplot(bg_model1) # look okay
summary(bg_model1)
bg_model2 <- lm(my_rating ~ average_bgg_rating + min_players , data = bg_data)
autoplot(bg_model2) # look okay
summary(bg_model2)
