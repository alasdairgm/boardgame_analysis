group_by(.cluster) %>%
summarise(mean(average_players), mean(my_rating))
cluster_means <- clusterings %>%
unnest(augmented) %>%
filter(k == 4) %>%
group_by(.cluster) %>%
summarise(mean_players = mean(average_players), mean_rating = mean(my_rating)) %>%
select(-.cluster)
cluster_means
players_cluster_plot +
geom_point(data = cluster_means,
aes(x = mean_players, y = mean_rating),
colour = "black", shape = 8, size = 3)
bg_data %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(colour = "steelblue") +
theme_minimal()
bg_data %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(colour = "steelblue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
playtime_ratings <- bg_data %>%
select(my_rating, play_time) %>%
drop_na()
playtime_ratings_scaled <- playtime_ratings %>%
mutate_if(is.numeric, scale)   # scale values
playtime_ratings
library(factoextra)
fviz_nbclust(playtime_cluster_data,
kmeans,
method = "wss",
nstart = 25)
playtime_cluster_data
library(factoextra)
fviz_nbclust(players_cluster_data,
kmeans,
method = "wss",
nstart = 25)
fviz_nbclust(players_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
library(factoextra)
fviz_nbclust(players_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
fviz_nbclust(playtime_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
library(factoextra)
fviz_nbclust(playtime_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
playtime_cluster_plot <- clusterings %>%
unnest(cols = c(augmented)) %>%
filter(k <= 4) %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(aes(colour = .cluster)) +
labs(x = "Average play time",
y = "My rating",
colour = "Cluster")
playtime_cluster_plot
library(tidyverse)
library(broom)
bg_data <- read_csv("clean_data/boardgames_clean.csv")
bg_data
bg_data %>%
slice_max(my_rating)
bg_data %>%
slice_min(my_rating)
bg_data %>%
slice_max(average_bgg_rating)
bg_data %>%
slice_min(average_bgg_rating)
bg_data %>%
filter(boardgame %in% c("Everdell: The Complete Collection",
"Root", "Sleeping Gods", "Gorilla Marketing",
"Bears Vs Babies")) %>%
mutate(boardgame = if_else(str_detect(boardgame, "Everdell"),
"Everdell", boardgame)) %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 5) +
geom_text(aes(label = boardgame),
nudge_x = -0.6, angle = 45) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal()
bg_data %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 4, alpha = 0.5) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,
linetype = "dashed", colour = "red",
size = 1)
library(corrr)
# bg_data %>%
#   corrr::correlate() %>%
#   corrr::network_plot(colors = c("red", "green"))
#   cor(my_rating, average_bgg_rating)
bg_data %>%
drop_na(my_rating) %>%
summarise(correlation = cor(my_rating, average_bgg_rating))
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(y = "BGG rank",
x = "",
fill = "Top 100?")
bg_data %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
group_by(top_100) %>%
summarise(prop_in_top_100 = n() / nrow(bg_data) * 100)
bg_data %>%
filter(bgg_rank <= 1000) %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(y = "BGG rank",
x = "",
fill = "Top 100?")
bg_data %>%
ggplot(aes(x = average_players, y = my_rating)) +
geom_point(colour = "steelblue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
players_ratings <- bg_data %>%
select(my_rating, average_players) %>%
drop_na()
players_ratings_scaled <- players_ratings %>%
mutate_if(is.numeric, scale)   # scale values
players_ratings
max_k <- 10 # max number of clusters to test
k_clusters <- tibble(k = 1:max_k) %>%
mutate(
kclust = map(k, ~ kmeans(players_ratings_scaled, .x, nstart = 25)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, players_ratings)
)
clusterings <- k_clusters %>%
unnest(glanced)
clusterings
ggplot(clusterings, aes(x=k, y=tot.withinss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 10, by = 1))
library(factoextra)
fviz_nbclust(players_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
players_cluster_plot <- clusterings %>%
unnest(cols = c(augmented)) %>%
filter(k <= 4) %>%
ggplot(aes(x = average_players, y = my_rating)) +
geom_point(aes(colour = .cluster)) +
labs(x = "Average players",
y = "My rating",
colour = "Cluster")
players_cluster_plot
cluster_means <- clusterings %>%
unnest(augmented) %>%
filter(k == 4) %>%
group_by(.cluster) %>%
summarise(mean_players = mean(average_players), mean_rating = mean(my_rating)) %>%
select(-.cluster)
cluster_means
players_cluster_plot +
geom_point(data = cluster_means,
aes(x = mean_players, y = mean_rating),
colour = "black", shape = 8, size = 3)
bg_data %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(colour = "steelblue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
playtime_ratings <- bg_data %>%
select(my_rating, play_time) %>%
drop_na()
playtime_ratings_scaled <- playtime_ratings %>%
mutate_if(is.numeric, scale)   # scale values
playtime_ratings
max_k <- 10 # max number of clusters to test
k_clusters <- tibble(k = 1:max_k) %>%
mutate(
kclust = map(k, ~ kmeans(playtime_ratings_scaled, .x, nstart = 25)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, playtime_ratings)
)
clusterings <- k_clusters %>%
unnest(glanced)
clusterings
ggplot(clusterings, aes(x=k, y=tot.withinss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 10, by = 1))
library(factoextra)
fviz_nbclust(playtime_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
playtime_cluster_plot <- clusterings %>%
unnest(cols = c(augmented)) %>%
filter(k <= 4) %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(aes(colour = .cluster)) +
labs(x = "Average play time",
y = "My rating",
colour = "Cluster")
playtime_cluster_plot
cluster_means <- clusterings %>%
unnest(augmented) %>%
filter(k == 4) %>%
group_by(.cluster) %>%
summarise(mean_playtime = mean(play_time), mean_rating = mean(my_rating)) %>%
select(-.cluster)
cluster_means
playtime_cluster_plot +
geom_point(data = cluster_means,
aes(x = mean_playtime, y = mean_rating),
colour = "black", shape = 8, size = 3)
bg_data %>%
filter(my_rating > 6 & my_rating <= 8) %>%
filter(play_time < 75)
bg_data %>%
filter(my_rating >= 8) %>%
filter(play_time < 125)
bg_data %>%
filter(my_rating > 6 & my_rating <= 8) %>%
filter(play_time < 75 & play_time > 50)
bg_data %>%
filter(my_rating > 6 & my_rating <= 8) %>%
filter(play_time < 75)
bg_data %>%
filter(my_rating >= 8) %>%
filter(play_time < 125 & play_time > 50)
library(modelr)
library(GGally)
library(ggfortify)
bg_data %>%
select(-boardgame) %>%
ggpairs(progress = FALSE)
bg_model1 <- lm(my_rating ~ average_bgg_rating, data = bg_data)
autoplot(bg_model1) # look okay
summary(bg_model1)
bg_data
bg_model_final <- lm(my_rating ~ average_bgg_rating + average_difficulty + price_i_paid, average_players + play_time + rec_age_range_from, data = bg_data)
autoplot(bg_model_final) # look okay
summary(bg_model_final)
bg_model_final <- lm(my_rating ~ average_bgg_rating + average_difficulty + price_i_paid, average_players + play_time + rec_age_range_from, data = bg_data)
autoplot(bg_model_final) # look okay
summary(bg_model_final)
bg_model_final <- lm(my_rating ~ average_bgg_rating + average_difficulty + price_i_paid + average_players + play_time + rec_age_range_from, data = bg_data)
autoplot(bg_model_final) # look okay
summary(bg_model_final)
playtime_cluster_plot <- clusterings %>%
unnest(cols = c(augmented)) %>%
filter(k <= 4) %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(aes(colour = .cluster)) +
labs(x = "Average play time",
y = "My rating",
colour = "Cluster")
library(tidyverse)
boardgames <- read_csv("raw_data/collection.csv")
my_ratings <- read_csv("raw_data/my_ratings.csv", locale = locale(encoding="latin1"))
dim(boardgames) # 59 rows 58 cols
names(boardgames) # lots of columns I'm not interested in
head(boardgames)
View(boardgames)
bg_model2 <- lm(my_rating ~ average_bgg_rating + price_i_paid , data = bg_data)
library(tidyverse)
library(broom)
bg_data <- read_csv("clean_data/boardgames_clean.csv")
bg_data
bg_data %>%
slice_max(my_rating)
bg_data %>%
slice_min(my_rating)
bg_data %>%
slice_max(average_bgg_rating)
bg_data %>%
slice_min(average_bgg_rating)
bg_data %>%
filter(boardgame %in% c("Everdell: The Complete Collection",
"Root", "Sleeping Gods", "Gorilla Marketing",
"Bears Vs Babies")) %>%
mutate(boardgame = if_else(str_detect(boardgame, "Everdell"),
"Everdell", boardgame)) %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 5) +
geom_text(aes(label = boardgame),
nudge_x = -0.6, angle = 45) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal()
bg_data %>%
ggplot(aes(x = my_rating, y = average_bgg_rating)) +
geom_point(colour = "steelblue", size = 4, alpha = 0.5) +
xlim(c(0, 10)) +
ylim(c(0, 10)) +
labs(x = "\nMy rating",
y = "Average BGG rating",
) +
theme(text = element_text(size = 16)) +
theme_minimal() +
geom_abline(intercept = 0, slope = 1,
linetype = "dashed", colour = "red",
size = 1)
library(corrr)
# bg_data %>%
#   corrr::correlate() %>%
#   corrr::network_plot(colors = c("red", "green"))
#   cor(my_rating, average_bgg_rating)
bg_data %>%
drop_na(my_rating) %>%
summarise(correlation = cor(my_rating, average_bgg_rating))
bg_data %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(y = "BGG rank",
x = "",
fill = "Top 100?")
bg_data %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
group_by(top_100) %>%
summarise(prop_in_top_100 = n() / nrow(bg_data) * 100)
bg_data %>%
filter(bgg_rank <= 1000) %>%
# removing anything after a colon to save space
mutate(boardgame = case_when(
str_detect(boardgame, ":") ~ str_extract(boardgame, "(.+): ", group = 1),
.default = boardgame)) %>%
mutate(top_100 = if_else(bgg_rank <= 100, TRUE, FALSE)) %>%
ggplot() +
geom_col(aes(x = reorder(boardgame, -bgg_rank), y = bgg_rank, fill = top_100)) +
coord_flip() +
labs(y = "BGG rank",
x = "",
fill = "Top 100?")
bg_data %>%
ggplot(aes(x = average_players, y = my_rating)) +
geom_point(colour = "steelblue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
players_ratings <- bg_data %>%
select(my_rating, average_players) %>%
drop_na()
players_ratings_scaled <- players_ratings %>%
mutate_if(is.numeric, scale)   # scale values
players_ratings
max_k <- 10 # max number of clusters to test
k_clusters <- tibble(k = 1:max_k) %>%
mutate(
kclust = map(k, ~ kmeans(players_ratings_scaled, .x, nstart = 25)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, players_ratings)
)
clusterings <- k_clusters %>%
unnest(glanced)
clusterings
ggplot(clusterings, aes(x=k, y=tot.withinss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 10, by = 1))
library(factoextra)
fviz_nbclust(players_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
players_cluster_plot <- clusterings %>%
unnest(cols = c(augmented)) %>%
filter(k <= 4) %>%
ggplot(aes(x = average_players, y = my_rating)) +
geom_point(aes(colour = .cluster)) +
labs(x = "Average players",
y = "My rating",
colour = "Cluster")
players_cluster_plot
cluster_means <- clusterings %>%
unnest(augmented) %>%
filter(k == 4) %>%
group_by(.cluster) %>%
summarise(mean_players = mean(average_players), mean_rating = mean(my_rating)) %>%
select(-.cluster)
cluster_means
players_cluster_plot +
geom_point(data = cluster_means,
aes(x = mean_players, y = mean_rating),
colour = "black", shape = 8, size = 3)
bg_data %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(colour = "steelblue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
playtime_ratings <- bg_data %>%
select(my_rating, play_time) %>%
drop_na()
playtime_ratings_scaled <- playtime_ratings %>%
mutate_if(is.numeric, scale)   # scale values
playtime_ratings
max_k <- 10 # max number of clusters to test
k_clusters <- tibble(k = 1:max_k) %>%
mutate(
kclust = map(k, ~ kmeans(playtime_ratings_scaled, .x, nstart = 25)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, playtime_ratings)
)
clusterings <- k_clusters %>%
unnest(glanced)
clusterings
ggplot(clusterings, aes(x=k, y=tot.withinss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 10, by = 1))
library(factoextra)
fviz_nbclust(playtime_ratings_scaled,
kmeans,
method = "wss",
nstart = 25)
playtime_cluster_plot <- clusterings %>%
unnest(cols = c(augmented)) %>%
filter(k <= 4) %>%
ggplot(aes(x = play_time, y = my_rating)) +
geom_point(aes(colour = .cluster)) +
labs(x = "Average play time",
y = "My rating",
colour = "Cluster")
playtime_cluster_plot
cluster_means <- clusterings %>%
unnest(augmented) %>%
filter(k == 4) %>%
group_by(.cluster) %>%
summarise(mean_playtime = mean(play_time), mean_rating = mean(my_rating)) %>%
select(-.cluster)
cluster_means
playtime_cluster_plot +
geom_point(data = cluster_means,
aes(x = mean_playtime, y = mean_rating),
colour = "black", shape = 8, size = 3)
bg_data %>%
filter(my_rating > 6 & my_rating <= 8) %>%
filter(play_time < 75)
bg_data %>%
filter(my_rating >= 8) %>%
filter(play_time < 125 & play_time > 50)
library(modelr)
library(GGally)
library(ggfortify)
bg_data %>%
select(-boardgame) %>%
ggpairs(progress = FALSE)
bg_model1 <- lm(my_rating ~ average_bgg_rating, data = bg_data)
autoplot(bg_model1) # look okay
summary(bg_model1)
bg_model_final <- lm(my_rating ~ average_bgg_rating + average_difficulty + price_i_paid + average_players + play_time + rec_age_range_from, data = bg_data)
autoplot(bg_model_final) # look okay
summary(bg_model_final)
car::vif(bg_model_final)
alias(bg_data)
alias(bg_model_final)
install.packages("see")
install.packages("performancw")
install.packages("performancw")
install.packages("performance")
library(see)
library(performance)
check_model(bg_model_final)
bg_model_final <- lm(my_rating ~ average_bgg_rating + price_i_paid + average_players + play_time + rec_age_range_from, data = bg_data)
autoplot(bg_model_final) # look okay
summary(bg_model_final)
bg_model_final <- lm(my_rating ~ average_bgg_rating + average_difficulty + price_i_paid + average_players + play_time + rec_age_range_from, data = bg_data)
autoplot(bg_model_final) # look okay
summary(bg_model_final)
